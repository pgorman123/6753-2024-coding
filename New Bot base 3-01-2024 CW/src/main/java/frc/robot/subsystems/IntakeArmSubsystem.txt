package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxAlternateEncoder;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.SparkPIDController;
import com.revrobotics.CANSparkBase.IdleMode;
import frc.robot.Constants.ArmContants;
import com.revrobotics.CANSparkBase;



public class IntakeArmSubsystem extends SubsystemBase {

   
    private CANSparkMax IntakeArmSparkMax = new CANSparkMax(ArmContants.IntakeArmCANID, MotorType.kBrushless);

    
    private SparkPIDController IntakeArmPID = IntakeArmSparkMax.getPIDController();

    private static final SparkMaxAlternateEncoder.Type IntakeArmEncodeType = SparkMaxAlternateEncoder.Type.kQuadrature;
    private static final int IntakeArmCPR = 8192;
    private RelativeEncoder IntakeArmalternateEncoder;


    public IntakeArmSubsystem() {

       
       
        IntakeArmSparkMax.restoreFactoryDefaults();
        IntakeArmSparkMax.setIdleMode(IdleMode.kBrake); // Changed it to coast for testing  AB
        IntakeArmSparkMax.setSmartCurrentLimit(40);
        IntakeArmSparkMax.setInverted(true);
       
       

        // PID Controllers information 
            IntakeArmPID.setP(.0008);  //0.0006 comment from 2023
            IntakeArmPID.setI(0.0008); //Was commented out previously     ~C
            IntakeArmPID.setD(.01);
            IntakeArmPID.setOutputRange(-0.5, 0.5); //was -1 and 1
            IntakeArmPID.setSmartMotionMaxAccel(4000, 0); //was 8000
            IntakeArmPID.setSmartMotionMaxVelocity(6000, 0); //was 12000

     
        IntakeArmalternateEncoder = IntakeArmSparkMax.getAlternateEncoder(IntakeArmEncodeType, IntakeArmCPR);
        //IntakeArmalternateEncoder.setInverted(true); // the encoder was moved to the other side of the shaft so it no longer needs to be inverted
        IntakeArmPID.setFeedbackDevice(IntakeArmalternateEncoder);

    }

    public void setIntakeArmPosition(double DesiredIntakeArmPosition) {
    

        IntakeArmPID.setReference(DesiredIntakeArmPosition, CANSparkBase.ControlType.kPosition); 
    

    }


   
   

    public double CurrentIntakeArmMotorPos() {
        return IntakeArmSparkMax.getEncoder().getPosition();
    }

  
    public double CurrentIntakeArmAltPos() {
        return IntakeArmalternateEncoder.getPosition();
    }


    public double IntakeArmVelocity() {
        return IntakeArmSparkMax.getEncoder().getVelocity();
    }

    public double IntakeArmAppliedOutput() {
        return IntakeArmSparkMax.getAppliedOutput();
    }

}   
