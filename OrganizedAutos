//Odemtry reset test auto, this goes on the right side of the speaker at an angle
}else if (AutoConstants.AutoRoute == 143){

        TrajectoryA = TrajectoryGenerator.generateTrajectory(new Pose2d(-1, -1, new Rotation2d(-30)),
                        List.of(  
                            new Translation2d(-.5, -.5)
                        ),
                                new Pose2d(0, 0, new Rotation2d(0)),config);



                m_robotDrive.resetOdometry(TrajectoryA.getInitialPose());


                return new SequentialCommandGroup(
                //Move to 0
                Move(TrajectoryA))
                
//Auto Blue Left
}else if (AutoConstants.AutoRoute == 114){/*Red Auto 1 2024 */

        TrajectoryA = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-.1, .4)
                        ),
                                new Pose2d(-.2, .7, new Rotation2d(-30)),config);

        TrajectoryB = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, .7, new Rotation2d(-30)),
                        List.of(  
                            new Translation2d(-1, .4)
                        ),
                                new Pose2d(-2.1, 0, new Rotation2d(0)),config);

         TrajectoryC = TrajectoryGenerator.generateTrajectory(new Pose2d(-2.1, 0, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-1, .4)
                        ),
                                new Pose2d(-.2, .7, new Rotation2d(-30)),config);
        TrajectoryD = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, .7, new Rotation2d(-30)),
                        List.of(  
                            new Translation2d(-4, 0)
                        ),
                                new Pose2d(-8.1, -0.46, new Rotation2d(0)),config);

         TrajectoryE = TrajectoryGenerator.generateTrajectory(new Pose2d(-8.1, -.46, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-5, 0)
                        ),
                                new Pose2d(-.2, .7, new Rotation2d(-30)),config);
         TrajectoryF = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, .7, new Rotation2d(-30)),
                        List.of(  
                            new Translation2d(-5, .4)
                        ),
                                new Pose2d(-8.1, 1.22, new Rotation2d(0)),config);
         TrajectoryG = TrajectoryGenerator.generateTrajectory(new Pose2d(6.3, .7, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(5, .4)
                        ),
                                new Pose2d(-.2, .7, new Rotation2d(-30)),config);


                m_robotDrive.resetOdometry(TrajectoryA.getInitialPose());


                return new SequentialCommandGroup(
                //Move to speaker to shot
                Move(TrajectoryA),
                //Move to pickup ring
                 new SequentialCommandGroup(
        
                               new ShooterTipCMD(theShooterTipSubsystem, .22).withTimeout(.25), //calibrate shooter tip
        
                               new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 1 (loaded)
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1)),
        
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryB),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryC),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),
                                                 
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryD),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryE),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),
                                                 
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryF),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryG),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1));
//Auto Blue Mid
} if (AutoConstants.AutoRoute == 124){/*Red Auto 1 2024 */

                TrajectoryA = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0.7)
                                ),
                                        new Pose2d(-2.2, 1.4, new Rotation2d(0)),config);

                TrajectoryB = TrajectoryGenerator.generateTrajectory(new Pose2d(-2.2, 1.4, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0.7)
                                ),
                                        new Pose2d(0, 0.1, new Rotation2d(0)),config);

                TrajectoryC = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0.1, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0)
                                ),
                                        new Pose2d(-2.2, 0.1, new Rotation2d(0)),config);
        
                TrajectoryD = TrajectoryGenerator.generateTrajectory(new Pose2d(-2.2, 0.1, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0)
                                ),
                                        new Pose2d(0, 0.1, new Rotation2d(0)),config);
                
                TrajectoryE = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0.1, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0)
                                ),
                                        new Pose2d(-2.2, -1.4, new Rotation2d(0)),config);

                TrajectoryF = TrajectoryGenerator.generateTrajectory(new Pose2d(-2.2, -1.4, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, -0.7)
                                ),
                                        new Pose2d(0, 0.1, new Rotation2d(0)),config);
                
        
                        m_robotDrive.resetOdometry(TrajectoryA.getInitialPose());
        
                        return new SequentialCommandGroup(       
                                new SequentialCommandGroup(
        
                               new ShooterTipCMD(theShooterTipSubsystem, .22).withTimeout(.25), //calibrate shooter tip
        
                               new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 1 (loaded)
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1)),
        
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryA),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryB),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),

                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryC),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),

                                 new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryD),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)),

                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 3
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),

                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryE),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryF),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 4
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1)


                                
                                                 
                                                 
                                                 
                                                 

//Auto Blue Right
if (AutoConstants.AutoRoute == 134){/*Red Auto 1right 3 point 2024 */
        //Moves to Speaker
        TrajectoryA = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-.1, -.8)
                        ),
                                new Pose2d(-.2, -1.7, new Rotation2d(30)),config);
        //Moves to Far left mid ring
        TrajectoryB = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, -1.7, new Rotation2d(30)),
                        List.of(  
                            new Translation2d(-1.5, 3)
                        ),
                               new Pose2d(-8.1, 3.4, new Rotation2d(0)),config);
        //Moves back to speaker
         TrajectoryC = TrajectoryGenerator.generateTrajectory(new Pose2d(-8.1, 3.4, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-1.5, 3)
                        ),
                                new Pose2d(-.2, -1.7, new Rotation2d(30)),config);
        //Moves to left mid mid ring
        TrajectoryD = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, -1.7, new Rotation2d(30)),
                        List.of(  
                            new Translation2d(-1.5, 3)
                        ),
                                new Pose2d(-8.1, 1.7, new Rotation2d(0)),config);
        //Moves back to speaker
         TrajectoryE = TrajectoryGenerator.generateTrajectory(new Pose2d(-8.1, 1.7, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-1.5, 3)
                        ),
                                new Pose2d(-.2, -1.7, new Rotation2d(30)),config);
        //Moves out to get left mid midfield ring
        TrajectoryF = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, -1.7, new Rotation2d(30)),
                        List.of(  
                            new Translation2d(-3, 3.4), new Translation2d(-7.5, 3.4)
                        ),
                                new Pose2d(-8.1, 0, new Rotation2d(0)),config);
        //Moves Back to Speaker
        TrajectoryG = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, -1.7, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-7.5, 3.4), new Translation2d(-3, 3.4)
                        ),
                                new Pose2d(-.2, -1.7, new Rotation2d(30)),config);


                m_robotDrive.resetOdometry(TrajectoryA.getInitialPose());

                return new SequentialCommandGroup(

                        Move(TrajectoryA),

                        new SequentialCommandGroup(
        
                               new ShooterTipCMD(theShooterTipSubsystem, .22).withTimeout(.25), 

                               //calibrate shooter tip
        
                               new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 1 (loaded)
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1)),
        
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryB),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryC),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),

                                 new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryD),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryE),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),
                                                 
                                                 new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryF),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryG),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1));
                                                
//Auto Red Left
if (AutoConstants.AutoRoute == 214){/*Red Auto 1right 3 point 2024 */
        //Moves to Speaker
        TrajectoryA = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-.1, .8)
                        ),
                                new Pose2d(-.2, 1.7, new Rotation2d(-30)),config);
        //Moves to Far left mid ring
        TrajectoryB = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, 1.7, new Rotation2d(-30)),
                        List.of(  
                            new Translation2d(-1.5, -3)
                        ),
                               new Pose2d(-8.1, -3.4, new Rotation2d(0)),config);
        //Moves back to speaker
         TrajectoryC = TrajectoryGenerator.generateTrajectory(new Pose2d(-8.1, -3.4, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-1.5, -3)
                        ),
                                new Pose2d(-.2, 1.7, new Rotation2d(-30)),config);
        //Moves to left mid mid ring
        TrajectoryD = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, 1.7, new Rotation2d(-30)),
                        List.of(  
                            new Translation2d(-1.5, -3)
                        ),
                                new Pose2d(-8.1, -1.7, new Rotation2d(0)),config);
        //Moves back to speaker
         TrajectoryE = TrajectoryGenerator.generateTrajectory(new Pose2d(-8.1, -1.7, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-1.5, -3)
                        ),
                                new Pose2d(-.2, 1.7, new Rotation2d(-30)),config);
        //Moves out to get left mid midfield ring
        TrajectoryF = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, 1.7, new Rotation2d(-30)),
                        List.of(  
                            new Translation2d(-3, -3.4), new Translation2d(-7.5, -3.4)
                        ),
                                new Pose2d(-8.1, 0, new Rotation2d(0)),config);
        //Moves Back to Speaker
        TrajectoryG = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, 1.7, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-7.5, -3.4), new Translation2d(-3, -3.4)
                        ),
                                new Pose2d(-.2, 1.7, new Rotation2d(-30)),config);


                m_robotDrive.resetOdometry(TrajectoryA.getInitialPose());

                return new SequentialCommandGroup(

                        Move(TrajectoryA),

                        new SequentialCommandGroup(
        
                               new ShooterTipCMD(theShooterTipSubsystem, .22).withTimeout(.25), 

                               //calibrate shooter tip
        
                               new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 1 (loaded)
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1)),
        
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryB),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryC),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),

                                 new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryD),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryE),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),
                                                 
                                                 new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryF),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryG),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1));
                                                
                                                 
                                

                        

                                


//Auto Red Mid
} if (AutoConstants.AutoRoute == 224){/*Red Auto 1 2024 */

                TrajectoryA = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0.7)
                                ),
                                        new Pose2d(-2.2, 1.4, new Rotation2d(0)),config);

                TrajectoryB = TrajectoryGenerator.generateTrajectory(new Pose2d(-2.2, 1.4, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0.7)
                                ),
                                        new Pose2d(0, 0.1, new Rotation2d(0)),config);

                TrajectoryC = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0.1, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0)
                                ),
                                        new Pose2d(-2.2, 0.1, new Rotation2d(0)),config);
        
                TrajectoryD = TrajectoryGenerator.generateTrajectory(new Pose2d(-2.2, 0.1, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0)
                                ),
                                        new Pose2d(0, 0.1, new Rotation2d(0)),config);
                
                TrajectoryE = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0.1, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, 0)
                                ),
                                        new Pose2d(-2.2, -1.4, new Rotation2d(0)),config);

                TrajectoryF = TrajectoryGenerator.generateTrajectory(new Pose2d(-2.2, -1.4, new Rotation2d(0)),
                                List.of(  
                                    new Translation2d(-1.5, -0.7)
                                ),
                                        new Pose2d(0, 0.1, new Rotation2d(0)),config);
                
        
                        m_robotDrive.resetOdometry(TrajectoryA.getInitialPose());
        
                        return new SequentialCommandGroup(       
                                new SequentialCommandGroup(
        
                               new ShooterTipCMD(theShooterTipSubsystem, .22).withTimeout(.25), //calibrate shooter tip
        
                               new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 1 (loaded)
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1)),
        
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryA),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryB),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),

                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryC),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),

                                 new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryD),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)),

                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 3
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),

                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryE),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryF),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 4
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1)


                                
                                                 
                                                 
                                                 
                                                 

//Auto Red Right

}else if (AutoConstants.AutoRoute == 234){/*Red Auto 1 2024 */

        TrajectoryA = TrajectoryGenerator.generateTrajectory(new Pose2d(0, 0, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-.1, -.4)
                        ),
                                new Pose2d(-.2, -.7, new Rotation2d(30)),config);

        TrajectoryB = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, -.7, new Rotation2d(30)),
                        List.of(  
                            new Translation2d(-1, -.4)
                        ),
                                new Pose2d(-2.1, 0, new Rotation2d(0)),config);

         TrajectoryC = TrajectoryGenerator.generateTrajectory(new Pose2d(-2.1, 0, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-1, -.4)
                        ),
                                new Pose2d(-.2, -.7, new Rotation2d(30)),config);
        TrajectoryD = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, -.7, new Rotation2d(30)),
                        List.of(  
                            new Translation2d(-4, 0)
                        ),
                                new Pose2d(-8.1, 0.46, new Rotation2d(0)),config);

         TrajectoryE = TrajectoryGenerator.generateTrajectory(new Pose2d(-8.1, .46, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(-5, 0)
                        ),
                                new Pose2d(-.2, -.7, new Rotation2d(30)),config);
         TrajectoryF = TrajectoryGenerator.generateTrajectory(new Pose2d(-.2, -.7, new Rotation2d(30)),
                        List.of(  
                            new Translation2d(-5, -.4)
                        ),
                                new Pose2d(-8.1, -1.22, new Rotation2d(0)),config);
         TrajectoryG = TrajectoryGenerator.generateTrajectory(new Pose2d(6.3, -.7, new Rotation2d(0)),
                        List.of(  
                            new Translation2d(5, -.4)
                        ),
                                new Pose2d(-.2, -.7, new Rotation2d(30)),config);


                m_robotDrive.resetOdometry(TrajectoryA.getInitialPose());


                return new SequentialCommandGroup(
                //Move to speaker to shot
                Move(TrajectoryA),
                //Move to pickup ring
                 new SequentialCommandGroup(
        
                               new ShooterTipCMD(theShooterTipSubsystem, .22).withTimeout(.25), //calibrate shooter tip
        
                               new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 1 (loaded)
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1)),
        
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryB),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryC),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),
                                                 
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryD),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryE),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1),
                                                 
                                new ParallelRaceGroup(   //lower intake and run wheels (to pick up note), until position 2 is reached       
                                 
                                 
                                        Move(TrajectoryF),
        
                                        new ParallelCommandGroup(
        
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.7),
                                        new TestingIntakeRunWheelsCMD(theIntakeSubsystem, "OUT")
        
                                        )),
        
                                new ParallelRaceGroup( //raise intake with loaded note and return to speaker (0,0)
        
                                        Move(TrajectoryG),
                                        new NewIntakeArmSetCMD(theNewIntakeArmSubsystem, 0.01)
                                        
                                ),
                                
                                new IntakeRunWheelsCMD(theIntakeSubsystem, 0.1 ).withTimeout(.7),
                                new ShooterRunWheelsCMD(theShooterSubsystem, -0.8).withTimeout(2), //build initial momentum
        
                                        new ParallelCommandGroup( //shoot note 2 
        
                                                 new TestingIntakeRunWheelsCMD(theIntakeSubsystem,"IN"),
                                                 new ShooterRunWheelsCMD(theShooterSubsystem, -0.8)
                       
                                                 ).withTimeout(1));
                    
                    
